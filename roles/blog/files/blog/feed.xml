<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>The Forest</title>
		<description>Internet dweller. Programming in Python and Clojure. Hy developer. Interested in encryption and Tor.</description>		
		<link>http://velox.pw</link>
		<atom:link href="http://velox.pw/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>Mailpile, sendmail &amp; procmail</title>
				<description>&lt;p&gt;&lt;link rel=&quot;alternate&quot; type=&quot;application/rss+xml&quot; title=&quot;The Forest&quot; href=&quot;http://velox.pw/feed.xml&quot;&gt;&lt;/p&gt;

&lt;h1&gt;What is Mailpile?&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://www.mailpile.is&quot;&gt;Mailpile&lt;/a&gt; is mail client with a rather unusual goal 
in todays world. It wants to be free, open-source, privacy oriented and easy to
use with encryption. This all comes with the goal of being self-hosted.&lt;/p&gt;

&lt;p&gt;This is a contrast to Protonmail who still keeps all your information on their
servers, making people with a slight trust issue look at you in a rather funny
way. However, Protonmail and Mailpile is among several email providers in the
wake of the NSA scandal to try and give you secure options to gmail, outlook and
yahoo. Which is in my opinion, Awesome!&lt;/p&gt;

&lt;p&gt;This does not solve the fundamental problem in todays world of emails. People 
can use PGP to communicate securely, but most doesn&amp;#39;t even know how it works (its
hard, remember?). Every email you send will get in the hands of gmail, outlook
or yahoo. Which makes NSA happy in the end. But this is all in the right step to
solve this problem.&lt;/p&gt;

&lt;p&gt;Now, Mailpile is supposed to be used with a local mail server or an existing
one. You could host it on a local server only you got access to, with full disk
encryption. Or worse, host is on a VPS and let have your private encryption keys.
For the latter there are other possible solutions, which I might take in another
blog post.&lt;/p&gt;

&lt;h1&gt;Installation&lt;/h1&gt;

&lt;p&gt;You will need 3 things:&lt;br&gt;
  1. sendmail&lt;br&gt;
  2. procmail&lt;br&gt;
  3. mailpile  &lt;/p&gt;

&lt;p&gt;This setup assumes you know how to portforward port 25, which needs to be open
to receive mail, along with how to setup a domains DNS records. I will also 
assume basic knowledge on any Linux distro. Even if the configurations are 
slightly different, there should be no major issue.&lt;/p&gt;

&lt;p&gt;Sendmail will work as the Message Transfer Agent (MTA), it will control
outgoing mail and incoming mail. Procmail works as a Mail Delivery Agent 
(MDA), whose job is to deliver the mail correctly. Mailpile works on top of this
stack as a Mail User Agent (MUA).&lt;/p&gt;

&lt;p&gt;This setup is meant to work for one user. If you need several users, I recommend
looking into postfix as its more flexible and better suited for this task. &lt;/p&gt;

&lt;h1&gt;Sendmail  &lt;/h1&gt;

&lt;p&gt;You will find sendmails configuration  in &lt;code&gt;/etc/mail&lt;/code&gt;. The first file to look 
at as sendmails main config file, &lt;code&gt;sendmail.mc&lt;/code&gt;. If it doesn&amp;#39;t exist, create a 
new one.&lt;/p&gt;

&lt;p&gt;The base configuration should look something like this:&lt;/p&gt;

&lt;pre&gt;
include(`/usr/share/sendmail-cf/m4/cf.m4&#39;)
define(`confDOMAIN_NAME&#39;, `&lt;DOMAIN&gt;&#39;)dnl
FEATURE(use_cw_file)

define(`confAUTH_OPTIONS&#39;, `A p y&#39;)dnl
TRUST_AUTH_MECH(`LOGIN PLAIN&#39;)dnl

define(`confAUTH_MECHANISMS&#39;, `LOGIN PLAIN&#39;)dnl
define(`confCACERT_PATH&#39;,`/etc/ssl/certs&#39;)
define(`confCACERT&#39;,`/etc/ssl/certs/ca.pem&#39;)
define(`confSERVER_CERT&#39;,`/etc/ssl/certs/server.crt&#39;)
define(`confSERVER_KEY&#39;,`/etc/ssl/private/server.key&#39;)

OSTYPE(linux)dnl
MAILER(local)dnl
MAILER(smtp)dnl
&lt;/pre&gt;

&lt;p&gt;This config makes a few assumptions. The &lt;code&gt;confAUTH_OPTIONS&lt;/code&gt; tells sendmail that
it won&amp;#39;t relay mail unless the user authenticates. There won&amp;#39;t be any plaintext
authentication on non-TLS connections. A good idea here is to read up on how to
properly generate the correct OpenSSL certs. Remember to adjust the 
&lt;code&gt;confDOMAIN_NAME&lt;/code&gt; to the correct value, assuming you got a domain. Generating 
the final config should be done with the following command:&lt;br&gt;
&lt;code&gt;m4 /etc/mail/sendmail.mc &amp;gt; /etc/mail/sendmail.cf&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The next file is  &lt;code&gt;/etc/mail/local-host-names&lt;/code&gt;, it should contain all domains to
the server. They should also resolve in your file &lt;code&gt;/etc/hosts&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;localhost
&amp;lt;domain&amp;gt;
mail.&amp;lt;domain&amp;gt;
localhost.localdomain
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;/ect/mail/access&lt;/code&gt; contains the list of addresses we want to relay mail from.
Since we are using mailpile, we assume we will only relay mail from our 
local IP.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;127.0.0.1       RELAY
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Generate the config file again as follow:
&lt;code&gt;makemap hash /etc/mail/access.db &amp;lt; /etc/mail/access&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The last file for sendmail will be &lt;code&gt;/ect/mail/aliases&lt;/code&gt;.
This file contains the user aliases for our system. So for instance, we only
set the required mail handles to &lt;code&gt;root&lt;/code&gt;, and set our user to be &lt;code&gt;root&lt;/code&gt;.
Thus we can receive all the mails to &lt;code&gt;postmaster&lt;/code&gt; and  &lt;code&gt;abuse&lt;/code&gt; without having
to care about separate users.
Thus the only line you should change would be:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;...
root:           &amp;lt;your user&amp;gt;
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can at this point add other aliases or other users for better management.
Generate the file for sendmail with the command &lt;code&gt;newaliases&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Launch the sendmail daemon with your service manager and you should be set!
Systemd user can do &lt;code&gt;systemctl start sendmail&lt;/code&gt;.&lt;/p&gt;

&lt;h1&gt;Procmail &lt;/h1&gt;

&lt;p&gt;Procmail will make sure the mails are put in the correct folder. Lets create
&lt;code&gt;.procmailrc&lt;/code&gt; in the home directory of the user who will receive mail!&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;PATH=/bin:/usr/bin
MAILDIR=$HOME/Mail
DEFAULT=$HOME/Mail/inbox
LOGFILE=$HOME/Mail/logfil2
SHELL=/bin/sh

:0:
* ^To:.*domain\.tld
/home/&amp;lt;user&amp;gt;/Mail/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This configuration should be simple enough. We define the variables on the top
to tell where the log file should be along with the default mail directories.
&lt;code&gt;:0:&lt;/code&gt; denotes possible flags, and the last colon tells procmail we will use a
lockfile.
The next is a regex which will be matched with the mail. If it matches we
forward the mail to our users Mail directory. In this case a simple check
for any mail sent to our domain should be enough.&lt;/p&gt;

&lt;p&gt;This should seamlessly work with sendmail and put any received mail to your
inbox.&lt;/p&gt;

&lt;h1&gt;Mailpile&lt;/h1&gt;

&lt;p&gt;NOTE: Mailpile is currently in alpha. Anything after this point is subject to
changes. I will try my best to keep it up dated.&lt;/p&gt;

&lt;p&gt;Start the mailpile console with &lt;code&gt;mp&lt;/code&gt; and type the following lines. Remember to 
change the lines for your needs.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# Basic setup
setup
set profiles.0.email = &amp;lt;user&amp;gt;@&amp;lt;domain&amp;gt;
set profiles.0.name = &amp;lt;Your Name&amp;gt;

# Add mailbox and scan for mails
add /home/&amp;lt;user&amp;gt;/Mail
rescan full


# Sendmail route setup
set routes.default = {}
set routes.default.command = /usr/bin/sendmail -i %(rcpt)s

# Add route to profile
set profiles.0.messageroute = default
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Visit &lt;code&gt;http://127.0.0.1:33411&lt;/code&gt; and enjoy Mailpile!&lt;/p&gt;

&lt;p&gt;Questions can be sent on &lt;a href=&quot;https://twitter.com/MortenLinderud&quot;&gt;Twitter&lt;/a&gt;
or mail at &lt;a href=&quot;mailto:fox@velox.pw&quot;&gt;fox@velox.pw&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Additional Reading Material&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://weldon.whipple.org/sendmail/starttlstut.html&quot;&gt;http://weldon.whipple.org/sendmail/starttlstut.html&lt;/a&gt;
&lt;a href=&quot;https://wiki.archlinux.org/index.php/GnuPG&quot;&gt;https://wiki.archlinux.org/index.php/GnuPG&lt;/a&gt;
&lt;a href=&quot;https://wiki.archlinux.org/index.php/OpenSSL&quot;&gt;https://wiki.archlinux.org/index.php/OpenSSL&lt;/a&gt;
&lt;a href=&quot;https://wiki.archlinux.org/index.php/OpenDKIM&quot;&gt;https://wiki.archlinux.org/index.php/OpenDKIM&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Sender_Policy_Framework&quot;&gt;https://en.wikipedia.org/wiki/Sender_Policy_Framework&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Sources&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://wiki.archlinux.org/index.php/sendmail&quot;&gt;https://wiki.archlinux.org/index.php/sendmail&lt;/a&gt;
&lt;a href=&quot;https://wiki.archlinux.org/index.php/Procmail&quot;&gt;https://wiki.archlinux.org/index.php/Procmail&lt;/a&gt;&lt;/p&gt;
</description>
				<pubDate>Wed, 09 Jul 2014 00:00:00 +0200</pubDate>
				<link>http://velox.pw/mail/2014/07/09/mailpile-sendmail-and-procmail.html</link>
				<guid isPermaLink="true">http://velox.pw/mail/2014/07/09/mailpile-sendmail-and-procmail.html</guid>
			</item>
		
			<item>
				<title>The State of Hy</title>
				<description>&lt;p&gt;&lt;link rel=&quot;alternate&quot; type=&quot;application/rss+xml&quot; title=&quot;The Forest&quot; href=&quot;http://velox.pw/feed.xml&quot;&gt;&lt;/p&gt;

&lt;p&gt;So, with the recent hipster attitude of posting a &amp;quot;State of *&amp;quot; every year, I thought i&amp;#39;d try and do it for something I have been contributing to for the past 6 months, Hy.&lt;/p&gt;

&lt;h2&gt;Short introduction&lt;/h2&gt;

&lt;p&gt;Hy is a Lisp &lt;del&gt;leeching&lt;/del&gt; living off the Python world. It compiles down to Python&amp;#39;s AST and is completely bidirectional, you can import Hy into Python and vica versa seamlessly! It just works. Hy is also more portable then normal Python code. Any code you write with Hy can be run on Python 2.6, 2.7, 3.2, 3.3, even 3.4 and pypy! It&amp;#39;s a rather young language but have hit a one year mark, but it does not mean Hy dosn&amp;#39;t got neato features.&lt;/p&gt;

&lt;p&gt;Probably worth mentioning:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hy got 1350 downloads from pypi last month alone!&lt;/li&gt;
&lt;li&gt;36 different contributors in a year.

&lt;ul&gt;
&lt;li&gt;16 are now core developers with a substantial contribution too the language&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;2 Lightning talks and 5 talks on different meetings/conferences&lt;/li&gt;
&lt;li&gt;tryHy got some attention in the past year. Still up and running; &lt;a href=&quot;http://try-hy.appspot.com/&quot;&gt;http://try-hy.appspot.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Speed&lt;/h2&gt;

&lt;p&gt;About a year ago paultag (our supreme BDFL) posted a gist comparing Hy with several Python versions, pypy and clojure-py. Just to celebrate the fact that Hy is one year old, I decided to do the same. clojure-py was skipped this year as the project is dead as far as I know, thus nothing have changed on that part.&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Python 2.6&lt;/th&gt;
&lt;th&gt;Python 2.7&lt;/th&gt;
&lt;th&gt;Python 3.2&lt;/th&gt;
&lt;th&gt;Python 3.3&lt;/th&gt;
&lt;th&gt;Python 3.4&lt;/th&gt;
&lt;th&gt;Pypy&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Python&lt;/td&gt;
&lt;td&gt;8.25&lt;/td&gt;
&lt;td&gt;8.76&lt;/td&gt;
&lt;td&gt;13.72&lt;/td&gt;
&lt;td&gt;14.14&lt;/td&gt;
&lt;td&gt;9.84&lt;/td&gt;
&lt;td&gt;0.90&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Hy&lt;/td&gt;
&lt;td&gt;14.20&lt;/td&gt;
&lt;td&gt;14.68&lt;/td&gt;
&lt;td&gt;15.06&lt;/td&gt;
&lt;td&gt;15.06&lt;/td&gt;
&lt;td&gt;10.51&lt;/td&gt;
&lt;td&gt;3.81&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;As you can see, Python 3.4 is actually the fastest version for running Hy, and we got no clue why! Pypy is still taking time, and we also got no clue why. Help on that front is appreciated.&lt;/p&gt;

&lt;p&gt;Original post: &lt;a href=&quot;https://gist.github.com/paultag/4365555&quot;&gt;https://gist.github.com/paultag/4365555&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Macros&lt;/h2&gt;

&lt;p&gt;Hy got fullfledged macros. What are macros? Its those spells Lisp evangelists talk about that you don&amp;#39;t understand. Basically, it allows you to alter code with code itself. Thus code and data in Lisp have blurred lines, making Lisp the awesomeness it is.
Macros are also coupled with quote, unquote, splicing and gensyms for making your life easier.
ref: &lt;a href=&quot;http://docs.hylang.org/en/latest/language/internals.html#hy-macros&quot;&gt;http://docs.hylang.org/en/latest/language/internals.html#hy-macros&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Reader Macros&lt;/h2&gt;

&lt;p&gt;Hy also recently got reader macros! So you can now have neato ways of altering the syntax as you go!&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;nv&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;defreader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;print &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#^&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#^&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;+2+3+4+3+2&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;+2+3+4+3+2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What about a literal for tuples? Hy dosn&amp;#39;t got that!&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;nv&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;defreader&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;, &lt;span class=&quot;o&quot;&gt;~@&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I should note that because of bad testing (or me), reader macros is currently lacking a few features in 0.9.12, but that will be solved in the upcoming release!
ref: &lt;a href=&quot;http://docs.hylang.org/en/latest/language/readermacros.html&quot;&gt;http://docs.hylang.org/en/latest/language/readermacros.html&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Error Handling&lt;/h2&gt;

&lt;p&gt;We went Extreme Makeover, Nerd Edition.
Before:
&lt;img src=&quot;http://i.imgur.com/JmHLkll.png&quot;/&gt;
After:
&lt;img alt=&quot;&quot; src=&quot;http://i.imgur.com/k3jM0LD.png&quot; /&gt;
You can now use Hy without getting long unreadable traceback blown in your face.
Obviously with its shortcomings:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&lt;span class=&quot;nv&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;Traceback&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;most&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;recent&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;input&amp;gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;in&lt;/span&gt; 
&lt;span class=&quot;nv&quot;&gt;TypeError&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;must&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;have&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;least&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;two&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;arguments.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Hy got no way of currently interferring of Python&amp;#39;s error handling, so the new error message are limited, but damn nice!&lt;/p&gt;

&lt;h2&gt;TCO...or just loop and recur it!&lt;/h2&gt;

&lt;p&gt;Quite recently Hy got a implementation regarding loop/recur. loop/recur partly solves the problem of having no TCO. It thrives in Clojure because of a limitation in the JVM, and hopefully it will be great addition to Hy!&lt;/p&gt;

&lt;p&gt;It is currently only in master, but will be in Hy for 0.9.13.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hy.contrib.loop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;factorial&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;loop &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;zero? &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;nv&quot;&gt;acc&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;recur&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dec &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;* &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;factorial&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;=&amp;gt; 402387260077093773543702433923003985719374864210714632543799910429938512398629020592044208486969404800479988610197196058631666872994808558901323829669944590997424504087073759918823627727188732519779505950995276120874975462497043601418278094646496291056393887437886487337119181045825783647849977012476632889835955735432513185323958463075557409114262417474349347553428646576611667797396668820291207379143853719588249808126867838374559731746136085379534524221586593201928090878297308431392844403281231558611036976801357304216168747609675871348312025478589320767169132448426236131412508780208000261683151027341827977704784635868170164365024153691398281264810213092761244896359928705114964975419909342221566832572080821333186116811553615836546984046708975602900950537616475847728421889679646244945160765353408198901385442487984959953319101723355556602139450399736280750137837615307127761926849034352625200015888535147331611702103968175921510907788019393178114194545257223865541461062892187960223838971476088506276862967146674697562911234082439208160153780889893964518263243671616762179168909779911903754031274622289988005195444414282012187361745992642956581746628302955570299024324153181617210465832036786906117260158783520751516284225540265170483304226143974286933061690897968482590125458327168226458066526769958652682272807075781391858178889652208164348344825993266043367660176999612831860788386150279465955131156552036093988180612138558600301435694527224206344631797460594682573103790084024432438465657245014402821885252470935190620929023136493273497565513958720559654228749774011413346962715422845862377387538230483865688976461927383814900140767310446640259899490222221765904339901886018566526485061799702356193897017860040811889729918311021171229845901641921068884387121855646124960798722908519296819372388642614839657382291123125024186649353143970137428531926649875337218940694281434118520158014123344828015051399694290153483077644569099073152433278288269864602789864321139083506217095002597389863554277196742822248757586765752344220207573630569498825087968928162753848863396909959826280956121450994871701244516461260379029309120889086942028510640182154399457156805941872748998094254742173582401063677404595741785160829230135358081840096996372524230560855903700624271243416909004153690105933983835777939410970027753472000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000L&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Astor&lt;/h2&gt;

&lt;p&gt;One of our core devs took over the maintainer role for astor. Astor is a library designed to easily read/write Python AST. Our primary usage of the library is inside &lt;code&gt;hy2py&lt;/code&gt;, where we use it to generate python code from the AST generated by Hy. A neat example is running &lt;code&gt;hy --spy&lt;/code&gt;, it hands back the python equivalent of the Hy code you run.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&lt;span class=&quot;nv&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hello&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;print &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;&amp;#39;Hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hello&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Hypsters!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;&amp;#39;Hypsters!&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;Hello&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Hypsters!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Check it out!&lt;br&gt;
&lt;a href=&quot;https://github.com/berkerpeksag/astor&quot;&gt;https://github.com/berkerpeksag/astor&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Future&lt;/h2&gt;

&lt;p&gt;So whats next in store for Hy, except world dominance in the land of Python?&lt;/p&gt;

&lt;p&gt;algernon is currently implementing a miniKanren in Hy. It&amp;#39;s a neat project and shows just how far Hy can be taken!&lt;br&gt;
&lt;a href=&quot;https://github.com/algernon/adderall&quot;&gt;https://github.com/algernon/adderall&lt;/a&gt;
&lt;a href=&quot;http://minikanren.org/&quot;&gt;http://minikanren.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There will be a Hy talk on PyCon2014 by Paul Tagliamonte (Hy&amp;#39;s creator and our supreme BDFL). Worth checking out if your interested in Pythons AST and how Hy works.
We are planning on porting Clojure&amp;#39;s nrepl project for Hy, so we can &lt;del&gt;leech off&lt;/del&gt; utilize all the amazing plugings created for nrepl.
There are small bugs around the place but Hy is coming along. Who knows what the future might bring? Join the Hyve!&lt;/p&gt;

&lt;h2&gt;Talks &amp;amp; Sources&lt;/h2&gt;

&lt;p&gt;Lightning talk on PyCon 2013:&lt;br&gt;
&lt;a href=&quot;http://www.youtube.com/watch?feature=player_detailpage&amp;amp;amp;v=1vui-LupKJI#t=975&quot;&gt;http://www.youtube.com/watch?feature=player_detailpage&amp;amp;amp;v=1vui-LupKJI#t=975&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Boston Python Meetup (January 2013)&lt;br&gt;
&lt;a href=&quot;http://www.youtube.com/watch?v=ulekCWvDFVI&quot;&gt;http://www.youtube.com/watch?v=ulekCWvDFVI&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;PyCon Canada 2013&lt;br&gt;
&lt;a href=&quot;http://www.youtube.com/watch?v=n8i2f6X0SkU&quot;&gt;http://www.youtube.com/watch?v=n8i2f6X0SkU&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;PyCon France 2013&lt;br&gt;
(Warning: French)&lt;br&gt;
&lt;a href=&quot;http://www.youtube.com/watch?v=ah9fwabLD70&quot;&gt;http://www.youtube.com/watch?v=ah9fwabLD70&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;PyCon Spain 2013&lt;br&gt;
(Warning: Spanish)&lt;br&gt;
&lt;a href=&quot;http://www.youtube.com/watch?v=dUBmaTZ8tpA&quot;&gt;http://www.youtube.com/watch?v=dUBmaTZ8tpA&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;PyCon 2014
&lt;a href=&quot;https://www.youtube.com/watch?v=AmMaN1AokTI&quot;&gt;https://www.youtube.com/watch?v=AmMaN1AokTI&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;EuroClojure 2014
&lt;a href=&quot;http://vimeo.com/100977462&quot;&gt;http://vimeo.com/100977462&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Python User Group talk by Benjamin Vulpes
&lt;a href=&quot;https://www.youtube.com/watch?v=v1aLxXw7bfw&quot;&gt;https://www.youtube.com/watch?v=v1aLxXw7bfw&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Chicago Python User Group talk by Christopher Webber&lt;br&gt;
&lt;a href=&quot;http://www.youtube.com/watch?v=SB9TWabor1k&quot;&gt;http://www.youtube.com/watch?v=SB9TWabor1k&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Blog post explaining the basics of Hy&lt;br&gt;
&lt;a href=&quot;http://engineersjourney.wordpress.com/2013/11/27/programming-can-be-fun-with-hy/&quot;&gt;http://engineersjourney.wordpress.com/2013/11/27/programming-can-be-fun-with-hy/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;learnxinyminutes post about hy written by theanalyst.&lt;br&gt;
&lt;a href=&quot;http://learnxinyminutes.com/docs/hy/&quot;&gt;http://learnxinyminutes.com/docs/hy/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This concludes the end of my post, and hopefully I didn&amp;#39;t ruin all your future hope for Hy, kinda like this:
&lt;img src=&quot;http://i.imgur.com/9KXUOow.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Follow us on twitter! &lt;a href=&quot;https://twitter.com/hylang&quot;&gt;https://twitter.com/hylang&lt;/a&gt;
There is also a list of Hy developers: &lt;a href=&quot;https://twitter.com/paultag/lists/hypsters&quot;&gt;https://twitter.com/paultag/lists/hypsters&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hy Society&lt;/strong&gt;&lt;br&gt;
&lt;a href=&quot;https://github.com/hylang/hy&quot;&gt;https://github.com/hylang/hy&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;http://docs.hylang.org/en/latest/&quot;&gt;http://docs.hylang.org/en/latest/&lt;/a&gt;&lt;/p&gt;
</description>
				<pubDate>Fri, 17 Jan 2014 00:00:00 +0100</pubDate>
				<link>http://velox.pw/hy/2014/01/17/the-state-of-hy.html</link>
				<guid isPermaLink="true">http://velox.pw/hy/2014/01/17/the-state-of-hy.html</guid>
			</item>
		
	</channel>
</rss>
